{
  "name": "asset",
  "version": "0.4.13",
  "description": "Asset manager",
  "keywords": [
    "assets",
    "javascript",
    "css",
    "package manager"
  ],
  "author": {
    "name": "TJ Holowaychuk",
    "email": "tj@vision-media.ca"
  },
  "dependencies": {
    "request": "1.9.5",
    "mkdirp": "0.3.x"
  },
  "bin": {
    "asset": "./bin/asset"
  },
  "main": "index",
  "readme": "\n# Asset\n\n  Asset manager for lazy people (think homebrew for assets).\n\n## Installation\n\n    $ npm install -g asset\n\n## Usage\n\n     Usage: asset [command] [options]\n\n     Commands:\n\n       install <name ...>   installs the given asset <name ...>\n       search  [query]      search available assets with optional [query]\n       info  <name ...>     display verbose information for the given asset <name ...>\n       none                 install dependencies from ./assets.json\n\n     Options:\n\n       -c, --compress    compress assets\n       -o, --out <dir>   output directory defaulting to ./public\n       -V, --version     output program version\n       -h, --help        display help information\n\n\n\n## Examples\n\n### Installing Several Assets\n\n By default asset installs to `./public`.\n\n      $ asset raphael jquery\n\n       install : raphael@1.4.7\n       install : jquery@1.5.2\n      download : jquery@1.5.2\n      complete : jquery@1.5.2 public/jquery.js\n      download : raphael@1.4.7\n      complete : raphael@1.4.7 public/raphael.js\n\n Asset names accept an optional version and modifiers, taking the form:\n \n    <name> ['@' version] [':' 'compress']\n\n To install all assets (that support compression) as compressed, we can use\n the `--compress` flag:\n \n      $ asset jquery raphael --compress\n\n  However this can be done at the asset-level as well using the `:compress` modifier:\n  \n      $ asset jquery@1.4.3:compress raphael\n\n            install : jquery@1.4.3\n            install : raphael@1.4.7\n           download : jquery@1.4.3\n           complete : jquery@1.4.3 public/jquery.min.js\n           download : raphael@1.4.7\n           complete : raphael@1.4.7 public/raphael.js\n\n### Install Destination\n\n  Tweak the output directory with `-o, --out <dir>`.\n\n      $ asset raphael g.raphael g.pie -o public/javascripts\n\n       install : raphael@1.4.7\n       install : g.raphael@0.4.1\n       install : g.pie@0.4.1\n      download : raphael@1.4.7\n      complete : raphael@1.4.7 public/javascripts/raphael.js\n      download : g.raphael@0.4.1\n      complete : g.raphael@0.4.1 public/javascripts/g.raphael.js\n      download : g.pie@0.4.1\n      complete : g.pie@0.4.1 public/javascripts/g.pie.js\n\n  Alternatively passing a directory name containing \"/\" will work as well, since `asset` knows this is not an asset, and becomes equivalent to `--out <dir>`:\n    \n       $ asset raphael jquery public/javascripts\n\n### Dependency Resolution\n\n  Asset currently supports extremely basic dependency mapping, for example below is the output of installing `g.pie`, which depends on `g.raphael`, which in turn depends on `raphael` itself.\n\n    $ asset g.pie\n\n          install : g.pie@0.4.1\n       dependency : g.raphael@0.4.1\n          install : g.raphael@0.4.1\n       dependency : raphael@1.4.7\n          install : raphael@1.4.7\n         download : raphael@1.4.7\n         complete : raphael@1.4.7 public/raphael.js\n         download : g.raphael@0.4.1\n         complete : g.raphael@0.4.1 public/g.raphael.js\n         download : g.pie@0.4.1\n         complete : g.pie@0.4.1 public/g.pie.js\n\n### Asset Information\n\n  Inspect verbose asset information:\n\n    $ asset info jquery g.raphael\n\n             name : jquery\n      description : jquery core framework\n              url : http://code.jquery.com/jquery-{version}.min.js\n          version : 1.5.2\n         filename : jquery.js\n\n             name : g.raphael\n      description : charting for raphael\n              url : https://github.com/DmitryBaranovskiy/g.raphael/raw/v{version}/g.raphael-min.js\n          version : 0.4.1\n         filename : g.raphael.js\n     dependencies : raphael\n\n\n### Installation Destination\n\n  To install a specific version, we can use the `@` character:\n  \n      $ asset jquery@1.5.0\n\n### Search Repository\n\n We can search the repository with an optional query, listing\n available assets and their default versions:\n \n     $ asset raphael\n\n      install : raphael@1.4.7\n     download : raphael@1.4.7\n     complete : raphael@1.4.7 public/raphael.js\n\n### assets.json\n\n By adding `./assets.json` you can store application dependencies, and install them quickly and easily with a single command `asset`. For example this file may contain one or more deps:\n \n     {\n         \"g.raphael\": \"0.4.1\"\n       , \"jquery\": \"1.5.2\"\n       , \"modernizr\": \"1.7\"\n     }\n \n\n Installed with the command:\n \n     $ asset\n     \n        install : g.raphael@0.4.1\n     dependency : raphael@1.4.7\n        install : raphael@1.4.7\n        install : jquery@1.5.2\n        install : modernizr@1.7\n       download : jquery@1.5.2\n       complete : jquery@1.5.2 public/jquery.js\n       download : raphael@1.4.7\n       complete : raphael@1.4.7 public/raphael.js\n       download : g.raphael@0.4.1\n       complete : g.raphael@0.4.1 public/g.raphael.js\n       download : modernizr@1.7\n       complete : modernizr@1.7 public/modernizr.js\n\n### Configuration\n\n By default options must be passed via the CLI, however `asset` will also check the `./.asset` and `~/.asset` JSON configuration files, so for example a project may set `{ \"out\": \"public/javascripts\" }` if we are mainly working with javascript, however the CLI options will always take precedence.\n\n### The Repository\n\n By default the repo bundled with `asset` is used, however the `~/.assets` configuration file is checked first. Perhaps down the road if/when asset becomes more flexible a repo will be hosted, for now simply fork the project edit `./assets.json`, and send a pull request.\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2011 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "_id": "asset@0.4.13",
  "dist": {
    "shasum": "7dd7ede6ce9f96cacfb776fdf30bed58ff9ca60d",
    "tarball": "https://registry.npmjs.org/asset/-/asset-0.4.13.tgz"
  },
  "_npmVersion": "1.1.61",
  "_npmUser": {
    "name": "tjholowaychuk",
    "email": "tj@vision-media.ca"
  },
  "maintainers": [
    {
      "name": "tjholowaychuk",
      "email": "tj@vision-media.ca"
    }
  ],
  "directories": {},
  "_shasum": "7dd7ede6ce9f96cacfb776fdf30bed58ff9ca60d",
  "_resolved": "https://registry.npmjs.org/asset/-/asset-0.4.13.tgz",
  "_from": "asset@0.4.13"
}
